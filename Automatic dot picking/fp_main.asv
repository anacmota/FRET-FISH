function varargout = fp_main(varargin)
%% Main analysis script of Ana's FRET data
% see USAGE.md

%% Settings edit before running,
% for example by fp_main_gui

prefix = '';

if nargin == 0
    s.setname = 'iAM732';
    
    s.autoPick = 1; % detect dots (using 'dots' to set 'userDots')
    s.xyres = 130;
    s.zres = 300;
    s.maxdist_nm = 130*7;
    
    
    % Get settings for s.setname
    s = getDataSetSettings(s);    
    varargout{1} = s;
    return;
else
    s = varargin{1};
end

% Non-exposed settings
s.plot = 0; % Generate plots or not
s.saveplot = 0; % Only used if s.plot = 1

mkdir('data')
s.savedir = sprintf('data/%s/', s.setname);
mkdir(s.savedir);
s.dapithfile = sprintf('data/%s/dapith.mat', s.setname);
s.autodotfile = sprintf('data/%s/autodots.mat', s.setname);

for kk = 1:numel(nargin)
    if strcmpi(varargin{kk}, 'settings')        
        s = varargin{kk+1};
        s.decofolder = [];
    end
end



%% 1 Get all FOV and their Nuclei
if s.autoPick % Either automatically picked dots
    fprintf('Getting automatically selected dots ...\n');
    [MM, NN] = get_autoPicked(s);
else % or manually selected
    fprintf('Manually curated nuclei ...\n')
    [MM, NN] = df_nm_load(s.calcfolder);
end

%% 2. Load the dapi threshold (or set if not existing)
if isfile(s.dapithfile)
    fprintf('Using an already defined threshold for G1/G2 identification\n');
    dapith = load(s.dapithfile, 'dapith');
    s.dapith = dapith.dapith;
else
    fprintf('Will ask for a G1/G2 threshold to use for this dataset\n');
    dapith = set_dapi_th_manually(s, MM, NN);    
    save(s.dapithfile, 'dapith');
    s.dapith = dapith;
end

if s.plot
    plotalot(MM, NN, s);
end

%% Get FRET for each nuclei and loci of interest

fprintf('Processing nuclei\n');
T = []; % Output table
for nn = 1:numel(NN)
progressbar(nn, numel(NN));
    N = NN{nn};    
    if N.dapisum < s.dapith % G1
        Tnuc = fp_getFret(s, MM, NN, nn, prefix); % get fret for this nuclei
        if istable(Tnuc)
            T = [T; Tnuc];
        end
    end
end 
fprintf('Done\n');

% Write table
tablename0 = sprintf('data/fret_%s', s.setname);
if s.autoPick
    tablename0 = [tablename0 '_autoPick'];
end
tablename = [tablename0 '.csv'];
sname = [tablename0 '_s.mat'];

fprintf('Writing data to %s\n', tablename);
writetable(T, tablename);
fprintf('Writing the used settings to %s\n', sname)
save(sname, 's');

%% Done
fprintf('plot the data with fp_plotFret(''%s'')\n', tablename);

end

function plotalot(M, N, s)
% Plot manual exist from MB and AM

keyboard

nXist_AM = cellfun(@(v) v.nXist_AM, N);
nXist_MB = cellfun(@(v) v.nXist_MB, N);

M = zeros(5,5);
for kk = 1:numel(N)
    a = nXist_AM(kk)+1;
    b = nXist_MB(kk)+1;
    if( a>0 && b>0)
        M(b, a) = M(b, a) +1;
    end
end


figure
imagesc(M)
axis equal
xlabel('Ana');
ylabel('Magda');
set(gca, 'XTick', 1:6);
set(gca, 'YTick', 1:6);
set(gca, 'XTickLabel', {'0', '1', '2', '3', '4'})
set(gca, 'YTickLabel', {'0', '1', '2', '3', '4'})
axis xy
axis([0.5,5.5,0.5,5.5])
colormap viridis
colorbar
dprintpdf('xist_am_mb_confusion', 'publish')

figure
scatter(nXist_AM+.5*rand(size(nXist_AM))-.25, nXist_MB+.5*rand(size(nXist_MB))-.25)
hold on
axis xy
axis([-0.5,4.5,-0.5,4.5])
xlabel('AM'), ylabel('MB')
dprintpdf('xist_am_mb_scatter', 'publish')


%N = N(D<dapith);

D = cellfun(@(v)v.dapisum, N)';
E = cellfun(@(v) v.xistsum, N);
nE = cellfun(@(v) v.nXist, N);
area = cellfun(@(v) v.area, N);

figure
subplot(1,2,1)
histogram(nXist_MB(D < dapith))
ylabel('# nuclei')
xlabel('nXist')
title('"G1"')
subplot(1,2,2)
histogram(nXist_MB(D > dapith))
xlabel('nXist')
ylabel('# nuclei')
title('"G2"')
dprintpdf('G1G2_nXist_MB', 'publish', 'w', 20)

figure,
scatter(E, D)
xlabel('xist')
ylabel('dapi')
%dprintpdf('xist-dapi', 'publish')

figure,
histogram(E)

figure
pd = fitdist(E(:)/max(E(:)), 'Kernel');
x = linspace(0, 1);
y = pdf(pd,x);
plot(x,y,'k-','LineWidth',2)
xlabel('Xist')
ylabel('#')
% dprintpdf('xistdist', 'publish')

figure
NE = E./area;
pd = fitdist(NE(:)/max(NE(:)), 'Kernel');
x = linspace(0, 1);
y = pdf(pd,x);
plot(x,y,'k-','LineWidth',2)
xlabel('Xist/area')
ylabel('#')
% dprintpdf('xistdist_area', 'publish')

keyboard

NG1F = getFemale(s, N, M);
end


function dapith = plotDapi(M, N, s)
% Set a threshold for dapi based on the dapisums in N


% Get dapisum
D = cellfun(@(v)v.dapisum,N)';
dapith = df_dapiThDialog(D);

if s.plot
    [K, KD] = kdeParzen(D/max(D(:)), [], [0, 1.1], .01);
    figure, plot(KD,K)
    xlabel('dapisum/max(dapisum)')
    ylabel('pdf')
    hold on, plot(dapith/max(D(:))*[1,1], [0, max(K)], 'r')
    legend({sprintf('N = %d', numel(D)), 'threshold'})
    if s.saveplot
        dprintpdf('dapisum', 'publish')
    end
end

end

function s = getDataSetSettings(s)
% Append or possibly overwrite settings in s
% based on a string with the set name

% Some typical settings
basedir = ['/Users/anamota/Desktop/' s.setname]; %'/Volumes/projects/FRET-FISH/' '/Volumes/AM/FRET-FISH/' '/Users/anamota/Desktop/'
    s.calcfolder = [basedir '_calc/'];       
    s.decofolder = [basedir '/']; 
    s.imagefolder = [basedir '/']; %'_decon/' % ex. _20200701_001/ It was used for Xist not deconvolved and placed in the original folder  
    s.donorchannel = 'a488';
    s.acceptorchannel = 'a594';
    s.fretchannel = 'a488fret'; %a594fret
    s.dnachannel = 'dapi';
return

end

function [MM, NN] = get_autoPicked(s)
 
    if isfile(s.autodotfile)
        load(s.autodotfile, 'MM', 'NN');
        clear matdata
    else
        disp('Detecting donor/acceptor pairs')
        [MM, NN] = df_nm_load(s.calcfolder);
        [A, B] = fp_setNucleiDots(MM, NN, s);
        MM = A; NN = B;
        save(s.autodotfile, '-v7.3', 'MM', 'NN');
    end

end


function dapith = set_dapi_th_manually(s, MM, NN)
% Get G1/G2 status

s.dapith = plotDapi(MM, NN, s);
D = cellfun(@(v) v.dapisum, NN)'; %
fprintf('Found %d G1 nuclei and %d G2 nuclei\n', sum(D<s.dapith), sum(D>s.dapith));

if s.plot
    savefile = [s.savedir 'withXist3.mat'];
    if isfile(savefile)
        load(savefile)
    else
        [MM,NN] = includeXistSum(s, MM, NN);
        genPerNuclei(s, MM, NN);
        save('-v7.3', savefile)
    end
end
dapith = s.dapith;
end